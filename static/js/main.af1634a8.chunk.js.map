{"version":3,"sources":["images/chalet.jpeg","pages/reservation.js","pages/accueil.js","pages/galerie.js","components/header.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Reservation","Accueil","src","chalet","alt","style","width","Galerie","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","Typography","variant","Button","color","to","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,qC,kLCE5B,SAASC,IACtB,OACE,6BACE,4C,qBCFS,SAASC,IACtB,OACE,6BACE,6BACE,yBACEC,IAAKC,IACLC,IAAI,OACJC,MAAO,CAACC,MAAO,YCRV,SAASC,IACtB,OACE,6BACE,wC,kDCKAC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAChB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,cAGA,kBAACS,EAAA,EAAD,CAAQC,MAAM,WACZ,kBAAC,IAAD,CAAMP,UAAU,oBAAoBQ,GAAG,KAAvC,YAEF,kBAACF,EAAA,EAAD,CAAQC,MAAM,WACZ,kBAAC,IAAD,CAAMP,UAAU,oBAAoBQ,GAAG,YAAvC,YAEF,kBAACF,EAAA,EAAD,CAAQC,MAAM,WACZ,kBAAC,IAAD,CAAMP,UAAU,oBAAoBQ,GAAG,gBAAvC,sBC1BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCGD,WACb,OACE,kBAAC,IAAD,KAEE,yBAAKf,UAAU,OACb,kBAACF,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,KAAI,kBAACnC,EAAD,OACtB,kBAAC,IAAD,CAAOmC,KAAK,YAAW,kBAAC7B,EAAD,OACvB,kBAAC,IAAD,CAAO6B,KAAK,gBAAe,kBAACpC,EAAD,YDZrB,MAASqC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af1634a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chalet.d9e9a206.jpeg\";","import React from \"react\";\n\nexport default function Reservation() {\n  return (\n    <div>\n      <h2>Reservation</h2>\n    </div>\n  );\n}\n","import React from \"react\";\nimport chalet from '../images/chalet.jpeg';\n\nexport default function Accueil() {\n  return (\n    <div>\n      <div>\n        <img\n          src={chalet}\n          alt=\"logo\"\n          style={{width: '100%'}}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Galerie() {\n  return (\n    <div>\n      <h2>Galerie</h2>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            La Cascade\n          </Typography>\n          <Button color=\"inherit\">\n            <Link className='App__header--link' to=\"/\">Accueil</Link>\n          </Button>\n          <Button color=\"inherit\">\n            <Link className='App__header--link' to=\"/galerie\">Galerie</Link>\n          </Button>\n          <Button color=\"inherit\">\n            <Link className='App__header--link' to=\"/reservation\">RÃ©servation</Link>\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Reservation from \"./pages/reservation\";\nimport Accueil from \"./pages/accueil\";\nimport Galerie from \"./pages/galerie\";\nimport './App.scss'\nimport Header from \"./components/header\";\n\nexport default function BasicExample() {\n  return (\n    <Router>\n\n      <div className='App'>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\"><Accueil /></Route>\n          <Route path=\"/galerie\"><Galerie /></Route>\n          <Route path=\"/reservation\"><Reservation /></Route>\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}